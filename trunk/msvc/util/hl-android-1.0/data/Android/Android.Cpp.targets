<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  *This file is automatically generated. Local changes risk being overwritten by the export process.*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->

<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <Import Project="$(VCTargetsPath)\Microsoft.CppCommon.targets" />

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <UsingTask TaskName="GccCompile" AssemblyFile="$(VCTargetsPath)\Platforms\$(Platform)\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />
  <UsingTask TaskName="GccLink" AssemblyFile="$(VCTargetsPath)\Platforms\$(Platform)\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />
  <UsingTask TaskName="GccLib" AssemblyFile="$(VCTargetsPath)\Platforms\$(Platform)\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />
  <UsingTask TaskName="GccStrip" AssemblyFile="$(VCTargetsPath)\Platforms\$(Platform)\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />
  <UsingTask TaskName="GccBuildId" AssemblyFile="$(VCTargetsPath)\Platforms\$(Platform)\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />

  <UsingTask TaskName="AntBuild" AssemblyFile="$(VCTargetsPath)\Platforms\$(Platform)\bin\vs-android.MsBuild.AdbTasks.dll" />
  <UsingTask TaskName="AdbDeploy" AssemblyFile="$(VCTargetsPath)\Platforms\$(Platform)\bin\vs-android.MsBuild.AdbTasks.dll" />
  
  <UsingTask TaskName="VCMessage" AssemblyName="Microsoft.Build.CppTasks.Common, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <PropertyGroup>

    <!--
      Define a custom target to evaluate build requirements and additional dependencies.     
    -->

    <PlatformPrepareForBuildDependsOn>PlatformToolsetPrepareForBuild;$(PlatformPrepareForBuildDependsOn)</PlatformPrepareForBuildDependsOn>

    <!--
      Enable incremental build by enable file tracking in tasks.
    -->

    <TrackFileAccess Condition="'$(TrackFileAccess)' == ''">true</TrackFileAccess>

    <!--
      Adjust target path to incorporate target architecture. GetDirectoryName evaluates out the relative paths - mimicking $(TargetDir).
    -->

    <TargetPath>$([System.IO.Path]::GetDirectoryName('$([System.IO.Path]::Combine($(ProjectDir),$(OutDir)$(TargetPlatformArchitectureEabi)))'))\$(TargetName)$(TargetExt)</TargetPath>

  </PropertyGroup>

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <!-- 
    'ClCompile' based on: MSBuild\Microsoft.Cpp\v4.0\Microsoft.CppCommon.targets 
  -->
  
  <Target Name="ClCompile" Condition="'@(ClCompile)' != ''" DependsOnTargets="SelectClCompile">

    <ItemGroup>
      <ClCompile>
        <PrecompiledHeaderOutputFile Condition="'%(ClCompile.PrecompiledHeader)' == 'NotUsing' or '%(ClCompile.PrecompiledHeader)' == ''"></PrecompiledHeaderOutputFile>
        <PrecompiledHeaderFile Condition="'%(ClCompile.PrecompiledHeader)' == 'NotUsing' or '%(ClCompile.PrecompiledHeader)' == ''"></PrecompiledHeaderFile>

        <CompileAs Condition="('%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.c')">CompileAsC</CompileAs>
        <CompileAs Condition="('%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.s')">CompileAsAsm</CompileAs>
        <CompileAs Condition="('%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.asm')">CompileAsAsm</CompileAs>
        <CompileAs Condition="('%(ClCompile.CompileAs)' == 'Default' and ('%(ClCompile.Extension)' != '.c' and '%(ClCompile.Extension)' != '.s' and '%(ClCompile.Extension)' != '.asm'))">CompileAsCpp</CompileAs>

        <NoExecutableStack Condition="'%(ClCompile.CompileAs)' == 'CompileAsAsm'">true</NoExecutableStack>

        <MinimalRebuildFromTracking Condition="'%(ClCompile.MinimalRebuildFromTracking)' == '' and '$(BuildType)' == 'Build' and '$(ForceRebuild)' != 'true'">true</MinimalRebuildFromTracking>

        <!-- 'Inline function limit' and 'Unswitch loops' are not supported by Clang. -->
        <InlineLimitSize Condition="'$(LlvmVersion)' != ''"></InlineLimitSize>
        <UnswitchLoops Condition="'$(LlvmVersion)' != ''"></UnswitchLoops>
      </ClCompile>
    </ItemGroup>

    <!-- 
      Process all the sources flagged for Pre-Compiled Header (PCH) generation first.
    -->

    <ItemGroup>
      <!-- Create a list of PCH requirements for each of the registered sources. Add a new item for each PCH input on sources flagged 'create'. -->
      <ClCompilePch Include="@(ClCompile->'%(RelativeDir)%(PrecompiledHeaderFile)')" Condition="'%(PrecompiledHeader)' == 'Create'">
        <ObjectFileName Condition="'$(LlvmVersion)' == ''">%(ClCompile.PrecompiledHeaderOutputFile)</ObjectFileName>
        <ObjectFileName Condition="'$(LlvmVersion)' != ''">%(ClCompile.PrecompiledHeaderOutputFile)</ObjectFileName>
        <CompileAs Condition="'%(ClCompile.CompileAs)' == 'CompileAsC'">CompileAsCHeader</CompileAs>
        <CompileAs Condition="'%(ClCompile.CompileAs)' != 'CompileAsC'">CompileAsCppHeader</CompileAs>
        <LinkCompiled Condition="'%(ClCompile.PrecompiledHeader)' == 'Create'">false</LinkCompiled>
      </ClCompilePch>

      <!-- GCC and Clang use slightly different methods of including PCHs. Clang also allows them to be placed in intermediate directories. -->
      <ClCompile>
        <OutputFile Condition="('%(ClCompile.PrecompiledHeader)' == 'Create' and '$(LlvmVersion)' == '')">%(ClCompile.PrecompiledHeaderOutputFile)</OutputFile>
        <OutputFile Condition="('%(ClCompile.PrecompiledHeader)' == 'Create' and '$(LlvmVersion)' != '')">%(ClCompile.PrecompiledHeaderOutputFile)</OutputFile>
        <ForcedIncludeFiles Condition="('%(ClCompile.PrecompiledHeader)' == 'Use' and '$(LlvmVersion)' == '')">$([System.String]::Copy('%(ClCompile.PrecompiledHeaderOutputFile)').Replace('.gch',''));%(ForcedIncludeFiles)</ForcedIncludeFiles>
        <ForcedIncludeFiles Condition="('%(ClCompile.PrecompiledHeader)' == 'Use' and '$(LlvmVersion)' != '')">$([System.String]::Copy('%(ClCompile.PrecompiledHeaderOutputFile)').Replace('.pch',''));%(ForcedIncludeFiles)</ForcedIncludeFiles>
        <AdditionalOptions Condition="'%(ClCompile.PrecompiledHeader)' == 'Use'">-Winvalid-pch %(AdditionalOptions)</AdditionalOptions>
      </ClCompile>
    </ItemGroup>

    <!-- 
      We differ slightly from Win32 targets here due to CL compiling both PCH and OBJ at the same time.
      To mimic this we need to first process the PCH export, and then follow this with actual OBJ compilation.
    -->

    <GccCompile
      Condition="'%(ClCompile.ExcludedFromBuild)'!='true'"
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Sources="@(ClCompilePch)"

      ProcessorNumber="%(ClCompile.ProcessorNumber)"
      MultiProcessorCompilation="%(ClCompile.MultiProcessorCompilation)"

      TrackerLogDirectory="%(ClCompile.TrackerLogDirectory)"
      TLogReadFiles="@(CLTLogReadFiles)"
      TLogWriteFiles="@(CLTLogWriteFiles)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(ClCompile.MinimalRebuildFromTracking)"

      OutputCommandLine="%(ClCompile.OutputCommandLine)"
      ToolPath="$(PlatformToolsetCompileToolPath)"
      ToolExe="$(PlatformToolsetCompileTool)"
      PropertiesFile="$(VCTargetsPath)\Platforms\$(Platform)\$(LangID)\gcc_compile.xml">

    </GccCompile>

    <!--
      Compile all sources, including those flagged to 'Create' PCH files (Reasoning above). 
    -->

    <GccCompile
      Condition="'%(ClCompile.ExcludedFromBuild)'!='true'"
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Sources="@(ClCompile)"

      ProcessorNumber="%(ClCompile.ProcessorNumber)"
      MultiProcessorCompilation="%(ClCompile.MultiProcessorCompilation)"

      TrackerLogDirectory="%(ClCompile.TrackerLogDirectory)"
      TLogReadFiles="@(CLTLogReadFiles)"
      TLogWriteFiles="@(CLTLogWriteFiles)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(ClCompile.MinimalRebuildFromTracking)"

      OutputCommandLine="%(ClCompile.OutputCommandLine)"
      ToolPath="$(PlatformToolsetCompileToolPath)"
      ToolExe="$(PlatformToolsetCompileTool)"
      PropertiesFile="$(VCTargetsPath)\Platforms\$(Platform)\$(LangID)\gcc_compile.xml">

    </GccCompile>

  </Target>

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <!-- 
    'Link' based on: MSBuild\Microsoft.Cpp\v4.0\Microsoft.CppCommon.targets 
  -->

  <Target 
    Name="Link" 
    Condition="'@(Link)' != ''">

    <PropertyGroup>
      <Link_MinimalRebuildFromTracking Condition="'@(Link->AnyHaveMetadataValue('MinimalRebuildFromTracking', 'false'))' == 'true'">false</Link_MinimalRebuildFromTracking>
      <Link_MinimalRebuildFromTracking Condition="'$(BuildType)' != 'Build' or '$(ForceRebuild)' == 'true'" >false</Link_MinimalRebuildFromTracking>
      <Link_MinimalRebuildFromTracking Condition="'$(Link_MinimalRebuildFromTracking)' == ''">true</Link_MinimalRebuildFromTracking>
    </PropertyGroup>

    <ItemGroup>
      <Link>
        <!-- Enforce dead-code stripping on exported application shared libraries. -->
        <StripUnusedSymbols Condition="'$(ConfigurationType)' == 'Application'">true</StripUnusedSymbols>
      </Link>
    </ItemGroup>

    <GccLink
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Sources="@(Link)"

      TrackerLogDirectory="%(Link.TrackerLogDirectory)"
      TLogReadFiles="@(LinkTLogReadFiles)"
      TLogWriteFiles="@(LinkTLogWriteFiles)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="$(Link_MinimalRebuildFromTracking)"

      OutputCommandLine="%(Link.OutputCommandLine)"
      ToolPath="$(PlatformToolsetLinkToolPath)"
      ToolExe="$(PlatformToolsetLinkTool)"
      PropertiesFile="$(VCTargetsPath)\Platforms\$(Platform)\$(LangID)\gcc_link.xml">

      <Output TaskParameter="OutputFiles" ItemName="LinkOutputFiles" />

      <Output TaskParameter="SkippedExecution" PropertyName="LinkSkippedExecution" />

    </GccLink>

    <Message Condition="'$(LinkSkippedExecution)' == 'false'" Text="$(MSBuildProjectFile) -&gt; @(LinkOutputFiles)" Importance="High" />

    <!--
      Separate debugging info/symbols from output library. Create a dedicated symbols file.
    -->

    <PropertyGroup>
      <_LinkStripUnusedSymbols>%(Link.StripUnusedSymbols)</_LinkStripUnusedSymbols>
      <_LinkStripDebugSymbols>%(Link.StripDebugSymbols)</_LinkStripDebugSymbols>
      <_LinkStripSymbolsRequired>false</_LinkStripSymbolsRequired>
      <_LinkStripSymbolsRequired Condition="('$(_LinkStripUnusedSymbols)' == 'true' or '$(_LinkStripDebugSymbols)' == 'true')">true</_LinkStripSymbolsRequired>
      <_LinkStripSymbolsRequired Condition="'$(LinkSkippedExecution)' == 'true'">false</_LinkStripSymbolsRequired>

      <_DebugLinkSharedLibrary>@(LinkOutputFiles->'%(FullPath)')</_DebugLinkSharedLibrary>
      <_DebugLinkSharedLibraryAutoloadScript>@(LinkOutputFiles->'%(RootDir)%(Directory)%(Filename).gdb')</_DebugLinkSharedLibraryAutoloadScript>
      <_DebugLinkSymbolsFile>@(LinkOutputFiles->'%(RootDir)%(Directory)%(Filename).debug')</_DebugLinkSymbolsFile>
    </PropertyGroup>

    <Exec 
      Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true')" 
      Command="$(PlatformToolsetObjcopyToolPath)\$(PlatformToolsetObjcopyTool) --only-keep-debug $(_DebugLinkSharedLibrary) $(_DebugLinkSymbolsFile)" 
    />
    
    <Error Condition="('$(_LinkStripSymbolsRequired)' == 'true' and !Exists('$(_DebugLinkSymbolsFile)'))" Text="Failed to export separated debug symbols file. Expected: $(_DebugLinkSymbolsFile)" />

    <Message Condition="'$(_LinkStripSymbolsRequired)' == 'true'" Text="$(MSBuildProjectFile) -&gt; $(_DebugLinkSymbolsFile)" Importance="High" />

    <!--
      Strip info/symbols from exported libraries, and create a link between these and their separated (paired) .debug symbol file.
    -->

    <ItemGroup>
      <LinkOutputFiles>
        <StripUnusedSymbols>$(_LinkStripUnusedSymbols)</StripUnusedSymbols>
        <StripDebugSymbols>$(_LinkStripDebugSymbols)</StripDebugSymbols>
        <TrackerLogDirectory>%(Link.TrackerLogDirectory)</TrackerLogDirectory>
        <MinimalRebuildFromTracking>%(Link.MinimalRebuildFromTracking)</MinimalRebuildFromTracking>
        <OutputCommandLine>%(Link.OutputCommandLine)</OutputCommandLine>
      </LinkOutputFiles>
    </ItemGroup>

    <GccStrip
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true')"
      Sources="@(LinkOutputFiles)"

      TrackerLogDirectory="%(LinkOutputFiles.TrackerLogDirectory)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(LinkOutputFiles.MinimalRebuildFromTracking)"

      OutputCommandLine="%(LinkOutputFiles.OutputCommandLine)"
      ToolPath="$(PlatformToolsetStripToolPath)"
      ToolExe="$(PlatformToolsetStripTool)"
      PropertiesFile="$(VCTargetsPath)\Platforms\$(Platform)\$(LangID)\gcc_strip.xml"
    />

    <Exec 
      Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true')"
      Command="$(PlatformToolsetObjcopyToolPath)\$(PlatformToolsetObjcopyTool) --add-gnu-debuglink=$(_DebugLinkSymbolsFile) $(_DebugLinkSharedLibrary)" 
    />

    <!--
      Evaluate library build-id and place debugging symbols under .\.build-id\[ab]\[cdefghijklmnopqrstuvwxyz].debug so GDB can find this via 'debug-files-directory'
      - More info: https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html
    -->

    <GccBuildId
      Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true')"
      TargetElf="$(_DebugLinkSharedLibrary)"
      OutputCommandLine="%(LinkOutputFiles.OutputCommandLine)"
      ToolPath="$(PlatformToolsetReadElfToolPath)"
      ToolExe="$(PlatformToolsetReadElfTool)">
      <Output TaskParameter="BuildId" PropertyName="_DebugLinkSharedLibaryBuildId" />
    </GccBuildId>

    <PropertyGroup Condition="'$(_DebugLinkSharedLibaryBuildId)' != ''">
      <_DebugLinkBuildIdPath>$([System.IO.Path]::GetDirectoryName('$(_DebugLinkSharedLibrary)'))\.build-id\$(_DebugLinkSharedLibaryBuildId.Substring(0,2))</_DebugLinkBuildIdPath>
      <_DebugLinkBuildIdFilename>$(_DebugLinkSharedLibaryBuildId.Substring(2)).debug</_DebugLinkBuildIdFilename>
    </PropertyGroup>

    <Copy 
      Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true')"
      SourceFiles="$(_DebugLinkSymbolsFile)" 
      DestinationFiles="$(_DebugLinkBuildIdPath)\$(_DebugLinkBuildIdFilename)" 
    />

    <WriteLinesToFile
      Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true')"
      File="$(_DebugLinkBuildIdPath)\$(_DebugLinkBuildIdFilename).txt"
      Lines="Debugging symbols for library: $(_DebugLinkSharedLibrary);Original file: $(_DebugLinkSymbolsFile);Build-id: $(_DebugLinkSharedLibaryBuildId);"
      Overwrite="true"
    />

    <!--
      Construct a GDB setup execution script, then embed this as an additional section ('gdb.setup') in the target library.
    -->

    <ItemGroup Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true')">
      <_GdbSearchDirectories Include="$(OutDir);$(LibraryPath)" />
      <_GdbDebugFileDirectories Condition="'$(_DebugLinkSharedLibrary)' != ''" Include="$([System.IO.Path]::GetDirectoryName('$(_DebugLinkSharedLibrary)'))" />
    </ItemGroup>

    <PropertyGroup>
      <Semicolon>%3B</Semicolon>
      <GdbSetupExecutionScript>$(_DebugLinkSharedLibraryAutoloadScript)</GdbSetupExecutionScript>
      <GdbSourceDirectories>@(_GdbSearchDirectories->'%(FullPath)', '$(Semicolon)')</GdbSourceDirectories>
      <GdbDebugFileDirectories>@(_GdbDebugFileDirectories->'%(FullPath)', '$(Semicolon)')</GdbDebugFileDirectories>
    </PropertyGroup>

    <Delete Condition="Exists('$(GdbSetupExecutionScript)')" Files="$(GdbSetupExecutionScript)" />

    <WriteLinesToFile
      Condition="'$(GdbSourceDirectories)' != ''" 
      File="$(GdbSetupExecutionScript)"
      Lines="directory $(GdbSourceDirectories);"
      Overwrite="false"
    />

    <!--
    <WriteLinesToFile 
      Condition="'$(GdbDebugFileDirectories)' != ''" 
      File="$(GdbSetupExecutionScript)"
      Lines="set solib-search-path $(GdbDebugFileDirectories);set debug-file-directory $(GdbDebugFileDirectories);"
      Overwrite="false"
    />
    -->

    <Exec 
      Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true' and Exists('$(GdbSetupExecutionScript)'))"
      Command="$(PlatformToolsetObjcopyToolPath)\$(PlatformToolsetObjcopyTool) --add-section debug_gdb_scripts=$(GdbSetupExecutionScript) $(_DebugLinkSharedLibrary)" 
    />

  </Target>

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <!-- 
    'Lib' based on: MSBuild\Microsoft.Cpp\v4.0\Microsoft.CppCommon.targets 
  -->

  <Target 
    Name="Lib" 
    Condition="'@(Lib)' != ''">

    <ItemGroup>
      <Lib>
        <MinimalRebuildFromTracking Condition="'%(Lib.MinimalRebuildFromTracking)' == '' and '$(BuildType)' == 'Build' and '$(ForceRebuild)' != 'true'">true</MinimalRebuildFromTracking>
      </Lib>
    </ItemGroup>

    <GccLib
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Sources="@(Lib)"

      TrackerLogDirectory="%(Lib.TrackerLogDirectory)"
      TLogReadFiles="@(LIBTLogReadFiles)"
      TLogWriteFiles="@(LIBTLogWriteFiles)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(Lib.MinimalRebuildFromTracking)"

      OutputCommandLine="%(Lib.OutputCommandLine)"
      ToolPath="$(PlatformToolsetLibToolPath)"
      ToolExe="$(PlatformToolsetLibTool)"
      PropertiesFile="$(VCTargetsPath)\Platforms\$(Platform)\$(LangID)\gcc_lib.xml">

      <Output TaskParameter="OutputFiles" ItemName="LibOutputFiles" />

      <Output TaskParameter="SkippedExecution" PropertyName="LibSkippedExecution" />

    </GccLib>

    <Message Condition="'$(LibSkippedExecution)' == 'false'" Text="$(MSBuildProjectFile) -&gt; @(LibOutputFiles)" Importance="High" />

    <!--
      Strip unused and debugging symbols, when requested.
    -->

    <ItemGroup>
      <LibOutputFiles>
        <StripUnusedSymbols>%(Lib.StripUnusedSymbols)</StripUnusedSymbols>
        <StripDebugSymbols>%(Lib.StripDebugSymbols)</StripDebugSymbols>
        <!-- Obviously I don't understand MSBuild, because referencing these props directly in GccStrip doesn't work. -->
        <TrackerLogDirectory>%(Lib.TrackerLogDirectory)</TrackerLogDirectory>
        <MinimalRebuildFromTracking>%(Lib.MinimalRebuildFromTracking)</MinimalRebuildFromTracking>
        <OutputCommandLine>%(Lib.OutputCommandLine)</OutputCommandLine>
      </LibOutputFiles>
    </ItemGroup>

    <Copy 
      Condition="('@(LibOutputFiles)' != '' and ('%(StripUnusedSymbols)' == 'true' or '%(StripDebugSymbols)' == 'true'))"
      SourceFiles="@(LibOutputFiles)" 
      DestinationFiles="$(OutDir)$(TargetName)$(TargetExt).unstripped" 
    />

    <GccStrip
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Condition="('@(LibOutputFiles)' != '' and ('%(StripUnusedSymbols)' == 'true' or '%(StripDebugSymbols)' == 'true'))"
      Sources="@(LibOutputFiles)"

      TrackerLogDirectory="%(LibOutputFiles.TrackerLogDirectory)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(LibOutputFiles.MinimalRebuildFromTracking)"

      OutputCommandLine="%(LibOutputFiles.OutputCommandLine)"
      ToolPath="$(PlatformToolsetStripToolPath)"
      ToolExe="$(PlatformToolsetStripTool)"
      PropertiesFile="$(VCTargetsPath)\Platforms\$(Platform)\$(LangID)\gcc_strip.xml"
    />

  </Target> 

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <Target Name="PlatformToolsetPrepareForBuild" DependsOnTargets="$(PlatformToolsetPrepareForBuildDependsOn)">
  
    <!-- Validate existence of Android SDK -->
    <Error Condition="'$(AndroidSdkRoot)' == ''" Text="Could not locate the Android SDK. Please make sure that the environment variable ANDROID_SDK_ROOT is set." />
    <Error Condition="!Exists('$(AndroidSdkRoot)')" Text="Could not locate the Android SDK. Path does not exist. Expected: $(AndroidSdkRoot)." />

    <!-- Validate existence of Android NDK -->
	<Error Condition="'$(AndroidNdkRoot)' == ''" Text="Could not locate the Android NDK. Please make sure that the environment variable ANDROID_NDK_ROOT is set." />
    <Error Condition="!Exists('$(AndroidNdkRoot)')" Text="Could not locate the Android NDK. Path does not exist. Expected: $(AndroidNdkRoot)." />

  </Target>

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <Import Project="$(VCTargetsPath)\Platforms\$(Platform)\Android.CppBuild.targets" />
  
  <Import Project="$(VCTargetsPath)\Platforms\$(Platform)\Android.CppStubs.targets" />

  <Import Project="$(VCTargetsPath)\Platforms\$(Platform)\Android.AdbBuild.targets" />

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

</Project>

<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
